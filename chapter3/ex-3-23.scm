(define (make-queue) (cons '() '()))
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (set-front-ptr! queue node) (set-car! queue node))
(define (set-rear-ptr! queue node) (set-cdr! queue node))

(define (make-node item) (cons (cons item '()) '()))
(define (next-node node) (cdr node))
(define (prev-node node) (cdr (car node)))
(define (set-next! node next) (set-cdr! node next))
(define (set-prev! node prev) (set-cdr! (car node) prev))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (car (front-ptr queue)))))

(define (rear-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (car (rear-ptr queue)))))

(define (rear-insert-queue! queue item)
  (let ((new-node (make-node item)))
    (cond ((empty-queue? queue)
	   (set-front-ptr! queue new-node)
	   (set-rear-ptr! queue new-node)
	   queue)
	  (else
	   (set-next! (rear-ptr queue) new-node)
	   (set-prev! new-node (rear-ptr queue))
	   (set-rear-ptr! queue new-node)
	   queue))))

(define (front-insert-queue! queue item)
  (let ((new-node (make-node item)))
    (cond ((empty-queue? queue)
	   (set-front-ptr! queue new-node)
	   (sete-rear-ptr! queue new-node)
	   queue)
	  (else
	   (set-next! new-node (front-ptr queue))
	   (set-prev! (front-ptr queue) new-node)
	   (set-front-ptr! queue new-node)
	   queue))))

(define (rear-delete-queue! queue)
  (cond ((empty-queue? queue)
	 (error "DELETE! called with an empty queue" queue))
	(else
	 (set-rear-ptr! queue (prev-node (rear-ptr queue)))
	 (set-next! (rear-ptr queue) '())
	 queue)))

(define (front-delete-queue! queue)
  (cond ((empty-queue? queue)
	 (error "DELETE! called with an empty queue" queue))
	(else
	 (set-front-ptr! queue (next-node (front-ptr queue)))
	 (set-prev! (front-ptr queue) '())
	 queue)))

(define (print-queue queue)
  (define (print-node node)
    (display (car (car node)))
    (if (null? (cdr node))
	(newline)
	(begin
	  (display " ")
	  (print-node (cdr node)))))
  (if (empty-queue? queue)
      (print "empty")
      (print-node (front-ptr queue))))

(define (ex-3-23-test)
  (define deq1 (make-queue))
  (print-queue deq1)
  (rear-insert-queue! deq1 'a)
  (print-queue deq1)
  (front-insert-queue! deq1 'x)
  (print-queue deq1)
  (rear-insert-queue! deq1 'b)
  (print-queue deq1)
  (front-insert-queue! deq1 'y)
  (print-queue deq1)
  (rear-insert-queue! deq1 'c)
  (print-queue deq1)
  (front-insert-queue! deq1 'z)
  (print-queue deq1)
  (rear-delete-queue! deq1)
  (print-queue deq1)
  (front-delete-queue! deq1)
  (print-queue deq1)
  (print (front-queue deq1))
  (print (rear-queue deq1))
)
